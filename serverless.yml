frameworkVersion: "3"
service: prisma-serverless-prisma-mongo
useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-esbuild
  - serverless-prune-plugin
  # - serverless-ssm-fetch
custom:
  esbuild:
    minify: true
    watch:
      pattern: app/**/*.ts # default .
      # ignore: ['.serverless/**/*', '.build'] # default ['.build', 'dist', 'node_modules']

  prune:
    automatic: true
    includeLayers: true
    number: 1
  
  # serverlessSsmFetch:
  #   MESSAGE:
  #     prod: "This is production environment"
  #     dev: "This is development environment"
  #   DATABASE_URL: 
  #     prod: /system/backoffice/api/main/DATABASE_URL~true
  #     dev: /system/backoffice/api/qa/DATABASE_URL~true

  environment:
    qa:
      MESSAGE: "This is development environment"
      # DATABASE_URL: ${ssm:/system/backoffice/api/qa/DATABASE_URL}
      DATABASE_URL: ${env:DATABASE_URL_QA}
    prod:
      MESSAGE: "This is production environment"
      # DATABASE_URL: ${ssm:/system/backoffice/api/main/DATABASE_UR}
      DATABASE_URL: ${env:DATABASE_URL}

provider:
  name: aws
  stage: ${opt:stage, 'qa'}
  region: us-east-1
  runtime: nodejs16.x

  environment:
    MESSAGE: ${self:custom.environment.${self:provider.stage}.MESSAGE}
    DATABASE_URL: ${self:custom.environment.${self:provider.stage}.DATABASE_URL}
    # DATABASE_URL: ${file(./env-var.js)DATABASE_URL}

functions:
  status:
    handler: app/status.handler
    events:
      - httpApi:
          method: GET
          path: /
    # ssmToEnvironment:
    #   - MESSAGE
    #   - DATABASE_URL
  seed:
    handler: app/seed.handler
    events:
      - httpApi:
          method: GET
          path: /seed
  getUsers:
    handler: app/users.handler
    events:
      - httpApi:
          method: GET
          path: /users
  # createUser:
  #   handler: handlers/create-user.handler
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /users
  # getPosts:
  #   handler: handlers/posts.handler
  #   events:
  #     - httpApi:
  #         method: GET
  #         path: /posts

# only include the Prisma binary required on AWS Lambda while packaging
package:
  patterns:
    - "!node_modules/.prisma/client/libquery_engine-*"
    - "node_modules/.prisma/client/*query_engine-windows*"
    - "node_modules/.prisma/client/*query_engine-rhel-*"
    - "node_modules/.prisma/client/schema.prisma"
    - "!node_modules/prisma/libquery_engine-*"
    - "!node_modules/@prisma/engines/**"
